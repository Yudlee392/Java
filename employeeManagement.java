/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Yudlee
 */
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
public class employeeManagement extends javax.swing.JFrame {

    File file;
    private List<Employee> List;
    private DefaultTableModel model;
    private int index;
    private int editedIndex;
    public employeeManagement() {
        initComponents();
        index = 1;
        icon();
        editedIndex = 1;
        file = new File("Yudlee.txt");
        List = new ArrayList<Employee>();
        model = (DefaultTableModel)tbManagement.getModel();
        btnEdit.setEnabled(false);
        btnRemove.setEnabled(false);
        if(file.length()>0){
            readFile();
        }
        statictis();
    }
    private void statictis(){        
        int totalSalary=0;
        for(var b : List){            
            totalSalary += b.getTienLuong();
        }
        lblTotalSalary.setText("TotalSalary: "+ totalSalary);
    }
    private void writeFile(List<Employee> List){
        FileOutputStream fileOutputStream = null;
        ObjectOutputStream outputStream = null;
        try{
            fileOutputStream = new FileOutputStream(file);
            outputStream = new ObjectOutputStream(fileOutputStream);
            for(var b:List){
                outputStream.writeObject(b);
            }
        }catch(IOException e){
            JOptionPane.showMessageDialog(rootPane, "Input Wrong Data !!!");
        }finally{
            try{
                if(fileOutputStream!=null){
                    fileOutputStream.close();
                }
                if(outputStream!= null){
                    outputStream.close();
                }
            }catch(IOException e){
                JOptionPane.showMessageDialog(rootPane, "Input Wrong Data !!!");
            }
        }
    }
    private void readFile(){
        FileInputStream fileInputStream = null;
        ObjectInputStream objectInputStream = null;
        try{
            fileInputStream = new FileInputStream(file);
            objectInputStream = new ObjectInputStream(fileInputStream);
            List.removeAll(List);
            while (fileInputStream.available()>0){
                Employee employee = (Employee) objectInputStream.readObject();
                List.add(employee);
                index++;
            }
        }catch(IOException|ClassNotFoundException e){
            JOptionPane.showMessageDialog(rootPane, "Cannot Read File");
        }finally{
            try{
                if(fileInputStream!=null){
                    fileInputStream.close();
                }
                if(objectInputStream!=null){
                    objectInputStream.close();
                }
            }catch(IOException e){
                JOptionPane.showMessageDialog(rootPane, "Cannot Read File");
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel12 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtSalary = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txtIdentityNumber = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        cbHomeTown = new javax.swing.JComboBox<>();
        cbGender = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbManagement = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        txtFind = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnRefesh1 = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        lblTotalSalary = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel12.setText("Name");
        getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, 30));
        getContentPane().add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, 330, 30));

        jLabel13.setText("Salary");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 220, -1, 30));
        getContentPane().add(txtSalary, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 220, 330, 30));

        jLabel14.setText("HomeTown");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 120, -1, 30));

        jLabel15.setText("IdentityNumber");
        getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, -1, 30));
        getContentPane().add(txtIdentityNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 170, 330, 30));

        jLabel16.setText("Gender");
        getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, -1, 30));

        cbHomeTown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "An Giang", "Bà Rịa – Vũng Tàu\t", "Bắc Giang", "Bắc Kạn", "Bạc Liêu", "Bắc Ninh", "Bến Tre", "Bình Định", "Bình Dương", "Bình Phước", "Bình Thuận", "Cà Mau", "Cần Thơ", "Cao Bằng", "Đà Nẵng", "Đắk Lắk", "Đắk Nông", "Điện Biên", "Đồng Nai", "Đồng Tháp", "Gia Lai", "Hà Giang", "Hà Nam", "Hà Nội", "Hà Tĩnh", "Hải Dương", "Hải Phòng", "Hậu Giang", "Hòa Bình", "Hưng Yên", "Khánh Hòa", "Kiên Giang", "Kon Tum", "Lai Châu", "Lạng Sơn", "Lâm Đồng", "Lào Cai", "Long An", "Nam Định", "Nghệ An", "Ninh Bình", "Ninh Thuận", "Phú Thọ", "Phú Yên", "Quảng Bình", "Quảng Nam", "Quảng Ngãi", "Quảng Ninh", "Quảng Trị", "Sóc Trăng", "Sơn La", "Tây Ninh", "Thái Bình", "Thái Nguyên", "Thanh Hóa", "Thừa Thiên Huế", "Tiền Giang", "TP Hồ Chí Minh", "Trà Vinh", "Tuyên Quang", "Vĩnh Long", "Vĩnh Phúc", "Yên Bái" }));
        cbHomeTown.setVerifyInputWhenFocusTarget(false);
        cbHomeTown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbHomeTownActionPerformed(evt);
            }
        });
        getContentPane().add(cbHomeTown, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 120, 330, 30));

        cbGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Other" }));
        cbGender.setVerifyInputWhenFocusTarget(false);
        cbGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbGenderActionPerformed(evt);
            }
        });
        getContentPane().add(cbGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 70, 330, 30));

        tbManagement.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "Name", "Gender", "HomeTown", "IdentityNumber", "Salary"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbManagement.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbManagementMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbManagement);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 320, 670, 110));

        jLabel17.setText("Find by Name");
        getContentPane().add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 270, -1, 30));
        getContentPane().add(txtFind, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 270, 330, 30));

        btnAdd.setIcon(new javax.swing.ImageIcon("C:\\Users\\TechCare\\Downloads\\add (1).png")); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 20, 100, 30));

        btnEdit.setIcon(new javax.swing.ImageIcon("C:\\Users\\TechCare\\Downloads\\editing.png")); // NOI18N
        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });
        getContentPane().add(btnEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 70, 100, 30));

        btnRemove.setIcon(new javax.swing.ImageIcon("C:\\Users\\TechCare\\Downloads\\remove.png")); // NOI18N
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        getContentPane().add(btnRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 120, 100, 30));

        btnSearch.setIcon(new javax.swing.ImageIcon("C:\\Users\\TechCare\\Downloads\\loupe.png")); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        getContentPane().add(btnSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 270, 100, 30));

        btnRefesh1.setIcon(new javax.swing.ImageIcon("C:\\Users\\TechCare\\Downloads\\refresh.png")); // NOI18N
        btnRefesh1.setText("Refesh");
        btnRefesh1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefesh1ActionPerformed(evt);
            }
        });
        getContentPane().add(btnRefesh1, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 170, 100, 30));

        btnExit.setIcon(new javax.swing.ImageIcon("C:\\Users\\TechCare\\Downloads\\exit.png")); // NOI18N
        btnExit.setText("Exit");
        btnExit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnExitMouseExited(evt);
            }
        });
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        getContentPane().add(btnExit, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 220, 100, 30));

        lblTotalSalary.setText("Total Salary: 0");
        getContentPane().add(lblTotalSalary, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 430, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbHomeTownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbHomeTownActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbHomeTownActionPerformed

    private void cbGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbGenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbGenderActionPerformed

    private void tbManagementMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbManagementMouseClicked
        btnEdit.setEnabled(true);
        btnRemove.setEnabled(true);
        if(List.size()>0){
            editedIndex = tbManagement.getSelectedRow();
        }
        if(editedIndex !=-1){
            Employee selectedEmployee = List.get(editedIndex);
            txtName.setText(selectedEmployee.getTen());
            cbGender.setSelectedItem(selectedEmployee.getGioiTinh());
            cbHomeTown.setSelectedItem(selectedEmployee.getNoiSinh());
            txtIdentityNumber.setText(String.valueOf(selectedEmployee.getMaDinhDanh()));
            txtSalary.setText(String.valueOf(selectedEmployee.getTienLuong()));
        }
    }//GEN-LAST:event_tbManagementMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String name =txtName.getText();
        String gender = cbGender.getSelectedItem().toString();;
        String homeTown = cbHomeTown.getSelectedItem().toString();
        String tIdentityNumber = txtIdentityNumber.getText();
        String tSalary = txtSalary.getText();
        if(!name.isEmpty()&&!gender.isEmpty()&&!homeTown.isEmpty()&&checkNum(tIdentityNumber)&&checkNum(tSalary)){
            int identityNumber = Integer.parseInt(txtIdentityNumber.getText());
            int salary = Integer.parseInt(txtSalary.getText());
            if(checkName(name)&&checkIdentity(identityNumber)&&checkSalary(salary)){
                Employee employee = new Employee(name,gender,homeTown,identityNumber,salary);
                if(List.contains(employee)){
                    JOptionPane.showMessageDialog(rootPane, "An employee already exists");
                }else{
                    List.add(employee);
                    model.addRow(new Object[]{index++,name,gender,homeTown,identityNumber,salary});
                    writeFile(List);
                    model.fireTableDataChanged();
                    txtName.setText("");
                    txtIdentityNumber.setText("");
                    txtSalary.setText("");
                    JOptionPane.showMessageDialog(rootPane, "Already add employee!!!");
                    statictis();
                }
            }else{
                JOptionPane.showMessageDialog(rootPane, "You must fill 2<= Length of  Name"
                    +"Identity Number must have 5 Number ;Salary: 500$-10000$");
            }
        }else{
            JOptionPane.showConfirmDialog(rootPane, "Make sure that there is no empty field and data type is correct!!!","Warning",JOptionPane.YES_OPTION);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        String name =txtName.getText();
        String gender = cbGender.getSelectedItem().toString();;
        String homeTown = cbHomeTown.getSelectedItem().toString();
        String tIdentityNumber = txtIdentityNumber.getText();
        String tSalary = txtSalary.getText();
        if(!name.isEmpty()&&!gender.isEmpty()&&!homeTown.isEmpty()&&checkNum(tIdentityNumber)&&checkNum(tSalary)){
            int identityNumber = Integer.parseInt(txtIdentityNumber.getText());
            int salary = Integer.parseInt(txtSalary.getText());
            if(checkName(name)&&checkIdentity(identityNumber)&&checkSalary(salary)){
                Employee employee = new Employee(name,gender,homeTown,identityNumber,salary);
                if(List.contains(employee)){
                    JOptionPane.showMessageDialog(rootPane, "An employee already exists");
                }else{
                    List.set(editedIndex, employee);
                    model.removeRow(editedIndex);
                    model.insertRow(editedIndex,new Object[]{editedIndex+1,name,gender,homeTown,identityNumber,salary});
                    model.fireTableDataChanged();
                    writeFile(List);
                    editedIndex=-1;
                    btnEdit.setEnabled(false);
                    btnRemove.setEnabled(false);
                    txtName.setText("");
                    txtIdentityNumber.setText("");
                    txtSalary.setText("");
                    JOptionPane.showMessageDialog(rootPane, "Already edit an employee");
                    statictis();
                }
            }else{JOptionPane.showMessageDialog(rootPane, "You must fill 2<= Length of  Name"
                +"Identity Number must have 5 Number ;Salary: 500$-10000$");
        }
        }else{
            JOptionPane.showMessageDialog(rootPane, "Make sure that there is no empty field and data type is correct!!!");
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int output = JOptionPane.showConfirmDialog(rootPane, "Do you want delete this an employee ?","Comfirm",JOptionPane.YES_NO_OPTION);
        if(output ==JOptionPane.YES_NO_OPTION){
            List.remove(editedIndex);
            model.removeRow(editedIndex);
            model.fireTableDataChanged();
            writeFile(List);
            index--;
            btnEdit.setEnabled(false);
            btnRemove.setEnabled(false);
            txtName.setText("");
            txtIdentityNumber.setText("");
            txtSalary.setText("");
            JOptionPane.showMessageDialog(rootPane, "Already delete employees ");
            statictis();
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String textInput = txtFind.getText();
        List<Employee> results = new ArrayList<>();
        if(textInput!=""){
            String str;
            for (Employee b:List){
                str = b.getTen();
                if(str.contains(textInput)){
                    results.add(b);
                }
            }
        }
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        int i = 0;
        for (var b:results){
            i++;
            model.addRow(new Object[]{i, b.getTen(),b.getGioiTinh(),b.getNoiSinh(),b.getMaDinhDanh(),b.getTienLuong()});
            model.fireTableDataChanged();
        }

        lblTotalSalary.setText("");
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnRefesh1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefesh1ActionPerformed
        String textInput = txtFind.getText();
        List<Employee> results = new ArrayList<>();
        if(textInput!=""){
            String str;
            for (Employee b:List){
                str = b.getTen();
                if(str.contains(textInput)){
                    results.add(b);
                }
            }
        }
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        txtName.setText("");
        txtIdentityNumber.setText("");
        txtSalary.setText("");
        int i = 0;
        for (var b:results){
            i++;
            model.addRow(new Object[]{i, b.getTen(),b.getGioiTinh(),b.getNoiSinh(),b.getMaDinhDanh(),b.getTienLuong()});
            model.fireTableDataChanged();
        }
    }//GEN-LAST:event_btnRefesh1ActionPerformed

    private void btnExitMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnExitMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_btnExitMouseExited

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        int output = JOptionPane.showConfirmDialog(rootPane, "Do you want to exit application?","Warning!!!",JOptionPane.YES_NO_OPTION);
        if(output == JOptionPane.YES_OPTION){
            this.dispose();
        }
    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(employeeManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(employeeManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(employeeManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(employeeManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new employeeManagement().setVisible(true);
            }
        });
    }
    private boolean checkNum(String num){
                try{
                    int check = Integer.parseInt(num);
                }catch(NumberFormatException e){
                    return false;
                }
                return true;
            }
    private boolean isString(String name){
        for(int i = 0;i<name.length();i++){
            if(Character.isAlphabetic(name.charAt(i))){
                return false;
            }
        }
        return true;
    }
    private boolean checkName(String name){
        if(!isString(name)&&name.length()>100||name.length()<2){
            return false;
        }
        return true;
    }
    private boolean checkIdentity(int num){
        if(num>99999||num<10000){
            return false;
        }
        return true;
    }
    private boolean checkSalary(int price){
        if(price>10000||price<500){
            return false;
        }
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRefesh1;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cbGender;
    private javax.swing.JComboBox<String> cbHomeTown;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTotalSalary;
    private javax.swing.JTable tbManagement;
    private javax.swing.JTextField txtFind;
    private javax.swing.JTextField txtIdentityNumber;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSalary;
    // End of variables declaration//GEN-END:variables
private void icon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("manament.png")));
    }
}
